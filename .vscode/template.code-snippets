{
    "template": {
        "scope": "cpp",
        "prefix": "prepare",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"lib/local.hpp\"",
            "#define debug(...) local::debug(#__VA_ARGS__, __VA_ARGS__)",
            "#else",
            "#define debug(...) 42",
            "#endif",
            "#define UNREACHABLE false",
            "#define unreachable() assert(UNREACHABLE)",
            "typedef long long ll;",
            "typedef long double ld;",
            "typedef pair<int,int> pii;",
            "class call_helper",
            "{",
            "private:",
            "    string_view tres, fres;",
            "public:",
            "    call_helper(const string& tres, const string& fres) : tres(tres), fres(fres) {}",
            "    template <typename F>",
            "    requires same_as<invoke_result_t<F>, void>",
            "    void operator()(F func) { func(); }",
            "    template <typename F>",
            "    requires same_as<invoke_result_t<F>, bool>",
            "    void operator()(F func) { cout<<(func()?tres:fres)<<'\\n'; }",
            "    template <typename F>",
            "    void operator()(F func) { cout<<func()<<'\\n'; }",
            "};",
            "class solver",
            "{",
            "private:",
            "    bool mc = false;",
            "    string tres=\"YES\", fres=\"NO\";",
            "    chrono::_V2::system_clock::time_point begin_time = chrono::high_resolution_clock::now();",
            "public:",
            "    ~solver()",
            "    {",
            "        auto end_time = chrono::high_resolution_clock::now();",
            "        auto duration = chrono::duration_cast<chrono::milliseconds>(end_time-begin_time);",
            "        clog<<\"Time Used:\"<<duration.count()<<\"ms\"<<endl;",
            "    }",
            "    void multicases() { this->mc = true; }",
            "    void tfres(const char* tres, const char* fres)",
            "    {",
            "        this->tres = tres;",
            "        this->fres = fres;",
            "    }",
            "    template <typename F>",
            "    void solve(F func)",
            "    {",
            "        call_helper call(tres, fres);",
            "        int t = 1;",
            "        if(mc) cin>>t;",
            "        while(t--) call(func);",
            "    }",
            "};",
            "int main(int argc, const char* argv[])",
            "{",
            "    ios::sync_with_stdio(false);",
            "    cin.tie(nullptr);",
            "    solver s;",
            "    s.multicases();",
            "    //======================================",
            "    auto f = []()",
            "    {",
            "        ",
            "    };",
            "    //======================================",
            "    s.solve(f);",
            "    return 0;",
            "}",
            "",
        ],
        "description": "代码模板"
    },
    "mc": {
        "scope": "cpp",
        "prefix": "mc",
        "body": [
            "int t;",
            "cin>>t;",
            "while(t--)",
            "{",
            "    $0",
            "}"
        ],
        "description": "多组数据"
    },
    "vector_n_0": {
        "scope": "cpp",
        "prefix": "vn0",
        "body": [
            "vector<int> ${a}(n);"
        ],
        "description": "0-indexed vector"
    },
    "vector_nn_0": {
        "scope": "cpp",
        "prefix": "vnn0",
        "body": [
            "vector<int> ${a}(n), ${b}(n);"
        ],
        "description": "0-indexed vector * 2"
    },
    "vector_n_1": {
        "scope": "cpp",
        "prefix": "vn1",
        "body": [
            "vector<int> ${a}(n+1);"
        ],
        "description": "1-indexed vector"
    },
    "vector_nn_1": {
        "scope": "cpp",
        "prefix": "vnn1",
        "body": [
            "vector<int> ${a}(n+1), ${b}(n+1);"
        ],
        "description": "1-indexed vector * 2"
    },
    "input_vector_n_0": {
        "scope": "cpp",
        "prefix": "ivn0",
        "body": [
            "for(int i=0;i<n;i++) cin>>${a}[i];"
        ],
        "description": "input 0-indexed vector"
    },
    "input_vector_n_1": {
        "scope": "cpp",
        "prefix": "ivn1",
        "body": [
            "for(int i=1;i<=n;i++) cin>>${a}[i];"
        ],
        "description": "input 1-indexed vector"
    },
    "output_vector_n_0": {
        "scope": "cpp",
        "prefix": "ovn0",
        "body": [
            "for(int i=0;i<n;i++) cout<<${a}[i]<<\" \\n\"[i==n-1];"
        ],
        "description": "output 0-indexed vector"
    },
    "output_vector_n_1": {
        "scope": "cpp",
        "prefix": "ovn1",
        "body": [
            "for(int i=1;i<=n;i++) cout<<${a}[i]<<\" \\n\"[i==n];"
        ],
        "description": "output 1-indexed vector"
    },
    "vector_nm_0": {
        "scope": "cpp",
        "prefix": "vnm0",
        "body": [
            "vector<vector<int>> ${a}(n, vector<int>(m));"
        ],
        "description": "vector_nm_0"
    },
    "vector_nm_1": {
        "scope": "cpp",
        "prefix": "vnm1",
        "body": [
            "vector<vector<int>> ${a}(n+1, vector<int>(m+1));"
        ],
        "description": "vector_nm_1"
    },
    "input_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ivnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "    for(int j=0;j<m;j++)",
            "        cin>>${a}[i][j];",
        ],
        "description": "input_vector_nm_0"
    },
    "input_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ivnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "    for(int j=1;j<=m;j++)",
            "        cin>>${a}[i][j];",
        ],
        "description": "input_vector_nm_1"
    },
    "output_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ovnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "    for(int j=0;j<m;j++)",
            "        cout<<${a}[i][j]<<\" \\n\"[j==m-1];",
        ],
        "description": "output_vector_nm_0"
    },
    "output_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ovnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "    for(int j=1;j<=m;j++)",
            "        cout<<${a}[i][j]<<\" \\n\"[j==m];",
        ],
        "description": "output_vector_nm_1"
    },
    "numno": {
        "scope": "cpp",
        "prefix": "numno",
        "body": [
            "const int mod = 998244353;",
            "ll qpow(ll a,ll k,ll p=mod)",
            "{",
            "    ll res = 1;",
            "    for(;k;k>>=1,a=a*a%p)",
            "        if(k&1) res=res*a%p;",
            "    return res;",
            "};",
            "ll inv(ll a,ll p=mod) { return qpow(a, mod-2, mod); }",
            "vector<ll> fac(1, 1), ifac(1, 1);",
            "ll C(ll n,ll m)",
            "{",
            "    if(m<0||m>n) return 0LL;",
            "    while((ll)fac.size()<n+1)",
            "    {",
            "        fac.push_back(fac.back()*fac.size());",
            "        ifac.push_back(inv(fac.back()));",
            "    }",
            "    return fac[n]*ifac[m]%mod*ifac[n-m]%mod;",
            "};"
        ],
        "description": "常用数学"
    },
    "tree": {
        "scope": "cpp",
        "prefix": "tree",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<n;i++)",
            "{",
            "    int u,v;",
            "    cin>>u>>v;",
            "    G[u].push_back(v);",
            "    G[v].push_back(u);",
            "}",
            ""
        ],
        "description": "树"
    },
    "graph": {
        "scope": "cpp",
        "prefix": "graph",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<=m;i++)",
            "{",
            "    int u,v;",
            "    cin>>u>>v;",
            "    G[u].push_back(v);",
            "    G[v].push_back(u);",
            "}",
            ""
        ],
        "description": "图"
    },
    "dfs": {
        "scope": "cpp",
        "prefix": "dfs",
        "body": [
            "function<void(int,int)> dfs = [&](int u,int p)",
            "{",
            "    for(auto v : G[u])",
            "    {",
            "        if(v==p) continue;",
            "        dfs(v, u);",
            "    }",
            "};",
            "dfs(1, 0);",
            ""
        ],
        "description": "图上 dfs"
    },
    "ufs":{
        "scope":"cpp",
        "prefix": "ufs",
        "body": [
            "vector<int> fa(n+1);",
            "iota(fa.begin(), fa.end(), 0);",
            "function<int(int)> find = [&](int x) { return x==fa[x]?x:fa[x]=find(fa[x]); };",
            ""
        ],
        "description": "并查集"
    }
}