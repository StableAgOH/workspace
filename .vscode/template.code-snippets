{
    "codeforces": {
        "scope": "cpp",
        "prefix": "codeforces",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"lib/local.h\"",
            "local_initialer _li(\"in.txt\", \"out.txt\");",
            "#else",
            "#define debug(...) (__VA_ARGS__)",
            "#define utime(...) ((void)0)",
            "#endif",
            "using ll = long long;",
            "auto solve(auto&& onecase, bool multicases, array<string, 2> bmsg)",
            "{",
            "\tusing R = decltype(onecase(1));",
            "\tint t = 1;",
            "\tif(multicases) cin>>t;",
            "\tfor(int i=1;i<=t;i++)",
            "\t{",
            "\t\tif constexpr(same_as<R, void>) onecase(i);",
            "\t\telse if constexpr(same_as<R, bool>) cout<<bmsg[onecase(i)]<<'\\n';",
            "\t\telse cout<<onecase(i)<<'\\n';",
            "\t}",
            "}",
            "int main()",
            "{",
            "\tcin.tie(nullptr)->sync_with_stdio(false);",
            "\tcin.exceptions(cin.failbit);",
            "\tauto onecase = [&]([[maybe_unused]] const int caseidx)",
            "\t{",
            "\t\t$0",
            "\t};",
            "\tsolve(onecase, true, {\"No\", \"Yes\"});",
            "}",
            ""
        ]
    },
    "normal": {
        "scope": "cpp",
        "prefix": "normal",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"lib/local.h\"",
            "local_initialer _li(\"in.txt\", \"out.txt\");",
            "#else",
            "#define debug(...) (__VA_ARGS__)",
            "#define utime(...) ((void)0)",
            "#endif",
            "using ll = long long;",
            "int main()",
            "{",
            "\tcin.tie(nullptr)->sync_with_stdio(false);",
            "\tcin.exceptions(cin.failbit);",
            "\t$0",
            "}",
            ""
        ]
    },
    "simple": {
        "scope": "cpp",
        "prefix": "simple",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "using ll = long long;",
            "int main()",
            "{",
            "#ifdef LOCAL",
            "\tfreopen(\"in.txt\", \"r\", stdin);",
            "\tfreopen(\"out.txt\", \"w\", stdout);",
            "#endif",
            "\tcin.tie(nullptr)->sync_with_stdio(false);",
            "\tcin.exceptions(cin.failbit);",
            "\t$0",
            "}",
            ""
        ]
    },
    "leetcode": {
        "scope": "cpp",
        "prefix": "leetcode",
        "body": [
            "#ifdef LOCAL",
            "#include \"lib/leetcode.h\"",
            "#endif",
            "using ll = long long;",
            "class Solution",
            "{",
            "public:",
            "\tauto solve()",
            "\t{",
            "\t\t$0",
            "\t}",
            "};",
            "#ifdef LOCAL",
            "LEETCODE_MAIN(solve);",
            "#endif",
            ""
        ]
    },
    "vector_n_0": {
        "scope": "cpp",
        "prefix": "vn0",
        "body": [
            "vector<int> ${a}(${n});"
        ]
    },
    "vector_n_1": {
        "scope": "cpp",
        "prefix": "vn1",
        "body": [
            "vector<int> ${a}(${n}+1);"
        ]
    },
    "input_vector_n_0": {
        "scope": "cpp",
        "prefix": "ivn0",
        "body": [
            "for(int i=0;i<${n};i++) cin>>${a}[i];"
        ]
    },
    "input_vector_n_1": {
        "scope": "cpp",
        "prefix": "ivn1",
        "body": [
            "for(int i=1;i<=${n};i++) cin>>${a}[i];"
        ]
    },
    "output_vector_n_0": {
        "scope": "cpp",
        "prefix": "ovn0",
        "body": [
            "for(int i=0;i<${n};i++) cout<<${a}[i]<<\" \\n\"[i==${n}-1];"
        ]
    },
    "output_vector_n_1": {
        "scope": "cpp",
        "prefix": "ovn1",
        "body": [
            "for(int i=1;i<=${n};i++) cout<<${a}[i]<<\" \\n\"[i==${n}];"
        ]
    },
    "vector_nm_0": {
        "scope": "cpp",
        "prefix": "vnm0",
        "body": [
            "vector ${a}(n, vector<int>(m));"
        ]
    },
    "vector_nm_1": {
        "scope": "cpp",
        "prefix": "vnm1",
        "body": [
            "vector ${a}(n+1, vector<int>(m+1));"
        ]
    },
    "input_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ivnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcin>>${a}[i][j];",
        ]
    },
    "input_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ivnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcin>>${a}[i][j];",
        ]
    },
    "output_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ovnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m-1];",
        ]
    },
    "output_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ovnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m];",
        ]
    },
    "isort": {
        "scope": "cpp",
        "prefix": "isort",
        "body": [
            "vector<int> o(n);",
            "iota(o.begin(), o.end(), 0);",
            "ranges::sort(o, [&](int i, int j) { return a[i]<a[j]; });"
        ]
    },
    "mcnt": {
        "scope": "cpp",
        "prefix": "mcnt",
        "body": [
            "map<decltype(a)::value_type, int> cnt;",
            "for(auto i : a) cnt[i]++;"
        ]
    },
    "comb": {
        "scope": "cpp",
        "prefix": "comb",
        "body": [
            "vector<mint> fac, ifac;",
            "mint A(int n, int m)",
            "{",
            "\tif(m<0||m>n) return 0;",
            "\twhile((int)fac.size()<n+1)",
            "\t{",
            "\t\tif(fac.empty()) fac = ifac = {1};",
            "\t\telse",
            "\t\t{",
            "\t\t\tfac.push_back(fac.back()*(int)fac.size());",
            "\t\t\tifac.push_back(1/fac.back());",
            "\t\t}",
            "\t}",
            "\treturn fac[n]*ifac[n-m];",
            "}",
            "mint C(int n, int m)",
            "{",
            "\tauto a = A(n, m);",
            "\treturn a==0?0:a*ifac[m];",
            "}"
        ]
    },
    "tree": {
        "scope": "cpp",
        "prefix": "tree",
        "body": [
            "vector<vector<int>> g(n+1);",
            "for(int i=1;i<n;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tg[u].push_back(v);",
            "\tg[v].push_back(u);",
            "}"
        ]
    },
    "graph": {
        "scope": "cpp",
        "prefix": "graph",
        "body": [
            "vector<vector<int>> g(n+1);",
            "for(int i=0;i<m;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tg[u].push_back(v);",
            "\tg[v].push_back(u);",
            "}"
        ]
    },
    "graph_w": {
        "scope": "cpp",
        "prefix": "graph_w",
        "body": [
            "vector<vector<pair<int, int>>> g(n+1);",
            "for(int i=0;i<m;i++)",
            "{",
            "\tint u,v,w;",
            "\tcin>>u>>v>>w;",
            "\tg[u].emplace_back(v, w);",
            "\tg[v].emplace_back(u, w);",
            "}"
        ]
    },
    "chmin": {
        "scope": "cpp",
        "prefix": "chmin",
        "body": [
            "template <typename T, typename U, typename C=common_type_t<T,U>>",
            "auto chmin(T& a, const U& b) { return C(b)<C(a)&&(a=b,true); }"
        ]
    },
    "chmax": {
        "scope": "cpp",
        "prefix": "chmax",
        "body": [
            "template <typename T, typename U, typename C=common_type_t<T,U>>",
            "auto chmax(T& a, const U& b) { return C(b)>C(a)&&(a=b,true); }"
        ]
    },
    "div_ceil": {
        "scope": "cpp",
        "prefix": "div_ceil",
        "body": [
            "template <integral T, integral U, typename C=common_type_t<T,U>>",
            "auto div_ceil(T a, U b) { auto [p,q] = div(C(a), C(b)); return p+!!q; }"
        ]
    },
    "dfs": {
        "scope": "cpp",
        "prefix": "dfs",
        "body": [
            "auto dfs = [&](this auto dfs,int u,int p) -> void",
            "{",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(v==p) continue;",
            "\t\tdfs(v,u);",
            "\t}",
            "};",
            "dfs(1,0);"
        ]
    },
    "hasher": {
        "scope": "cpp",
        "prefix": "hasher",
        "body": [
            "struct hasher",
            "{",
            "\tstatic uint64_t splitmix64(uint64_t x)",
            "\t{",
            "\t\tx += 0x9e3779b97f4a7c15;",
            "\t\tx = (x^(x>>30))*0xbf58476d1ce4e5b9;",
            "\t\tx = (x^(x>>27))*0x94d049bb133111eb;",
            "\t\treturn x^(x>>31);",
            "\t}",
            "\tsize_t operator()(uint64_t x) const ",
            "\t{",
            "\t\tstatic const uint64_t fix = chrono::steady_clock::now().time_since_epoch().count();",
            "\t\treturn splitmix64(x+fix);",
            "\t}",
            "};"
        ]
    },
    "erfen": {
        "scope": "cpp",
        "prefix": "erfen",
        "body": [
            "auto check = [&](auto g) -> bool",
            "{",
            "\t$3",
            "};",
            "auto res = *ranges::partition_point(views::iota($1, $2), check);"
        ]
    },
    "sanfen": {
        "scope": "cpp",
        "prefix": "sanfen",
        "body": [
            "ll l=1, r=1e9;",
            "while(l<r)",
            "{",
            "\tauto ml=l+(r-l)/3, mr=r-(r-l)/3;",
            "\tauto fl=f(ml), fr=f(mr);",
            "\tif(fl<=fr)",
            "\t{",
            "\t\tchmin(ans, fl);",
            "\t\tr = mr-1;",
            "\t}",
            "\telse",
            "\t{",
            "\t\tchmin(ans, fr);",
            "\t\tl = ml+1;",
            "\t}",
            "}",
            "return ans;"
        ]
    },
    "digitdp": {
        "scope": "cpp",
        "prefix": "digitdp",
        "body": [
            "auto f = [&](ll x) -> ll // [1,x]",
            "{",
            "\tvector<int> a;",
            "\tfor(auto c : to_string(x)) a.push_back(c-'0');",
            "\tmdarray<optional<ll>, 20, 10, 2, 2> dp;",
            "\t// 到第 p 位，x 代表到当前位时 {?}，前一位是否顶着上界(lim)，前一位是不是前导零(zero)",
            "\tauto dfs = [&](this auto dfs, size_t p, int x, bool lim, bool zero) -> ll",
            "\t{",
            "\t\tif(p==a.size()) return /* {确定一个解对答案的贡献} */;",
            "\t\tif(dp[p][x][lim][zero]) return *dp[p][x][lim][zero];",
            "\t\tll res = 0;",
            "\t\tfor(int i=zero;i<=(lim?a[p]:9);i++) // 第 p 位取 i",
            "\t\t{",
            "\t\t\t/* {确定是否需要筛选 i} */",
            "\t\t\tres += dfs(p+1, /* {确定 x 的变化} */, lim&&i==a[p], false);",
            "\t\t}",
            "\t\tdp[p][x][lim][zero] = res;",
            "\t\treturn res;",
            "\t};",
            "\tll ret = 0;",
            "\tfor(size_t i=0;i<a.size();i++)  // 第 i 位是第一个非 0 的",
            "\t\tret += dfs(i, /* {x 的初始值} */, !i, true);",
            "\treturn ret;",
            "};"
        ]
    },
    "hjt": {
        "scope": "cpp",
        "prefix": "hjt",
        "body": [
            "struct Node { int l,r,val; };",
            "vector<Node> t(m*(ceil(log2(n))+1));",
            "vector<int> root(n+1);",
            "int cnt = 0;",
            "auto ins = [&](auto&& ins, int l,int r,int pre,int& k,int x)",
            "{",
            "\tk = ++cnt;",
            "\tt[k] = t[pre];",
            "\tt[k].val++;",
            "\tif(l==r) return;",
            "\tint m = (l+r)>>1;",
            "\tif(x<=m) ins(ins,l,m,t[pre].l,t[k].l,x);",
            "\telse ins(ins,m+1,r,t[pre].r,t[k].r,x);",
            "};",
            "auto query = [&](this auto query,int l,int r,int L,int R,int x,int y)",
            "{",
            "\tif(x<=l&&y>=r) return t[R].val-t[L].val;",
            "\tint m = (l+r)>>1;",
            "\tint sum = 0;",
            "\tif(x<=m) sum += query(l,m,t[L].l,t[R].l,x,y);",
            "\tif(y>m) sum += query(m+1,r,t[L].r,t[R].r,x,y);",
            "\treturn sum;",
            "};"
        ]
    },
    "dsuontree": {
        "scope": "cpp",
        "prefix": "dsuontree",
        "body": [
            "int tim = 0;",
            "vector<int> siz(n+1), son(n+1), dfn(n+1), id(n+1);",
            "auto dfs1 = [&](this auto dfs1,int u,int f) -> void",
            "{",
            "\tsiz[u] = 1;",
            "\tdfn[u] = ++tim;",
            "\tid[tim] = u;",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(v==f) continue;",
            "\t\tdfs1(v,u);",
            "\t\tsiz[u] += siz[v];",
            "\t\tif(siz[v]>siz[son[u]]) son[u] = v;",
            "\t}",
            "};",
            "auto add = [&](int u)",
            "{",
            "};",
            "auto del = [&](int u)",
            "{",
            "};",
            "auto dfs2 = [&](this auto dfs2,int u,int f,bool keep) -> void",
            "{",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(v==f||v==son[u]) continue;",
            "\t\tdfs2(v,u,false);",
            "\t}",
            "\tif(son[u]) dfs2(son[u],u,true);",
            "\tadd(u);",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(v==f||v==son[u]) continue;",
            "\t\tfor(int i=dfn[v];i<dfn[v]+siz[v];i++)",
            "\t\t\tadd(id[i]);",
            "\t}",
            "\tans[u] = sum;",
            "\tif(!keep)",
            "\t{",
            "\t\tfor(int i=dfn[u];i<dfn[u]+siz[u];i++)",
            "\t\t\tdel(id[i]);",
            "\t}",
            "};",
            "dfs1(1,0);",
            "dfs2(1,0,false);"
        ]
    },
    "centroid_decomposition": {
        "scope": "cpp",
        "prefix": "centroid_decomposition",
        "body": [
            "int part=n, cent=0;",
            "vector<int> siz(n+1), maxp(n+1);",
            "vector<bool> del(n+1);",
            "auto get_cent = [&](auto&& get_cent, int u, int p) -> void",
            "{",
            "\tsiz[u] = 1;",
            "\tmaxp[u] = 0;",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(v==p||del[v]) continue;",
            "\t\tget_cent(get_cent, v, u);",
            "\t\tsiz[u] += siz[v];",
            "\t\tmaxp[u] = max(maxp[u], siz[v]);",
            "\t}",
            "\tmaxp[u] = max(maxp[u], part-siz[u]);",
            "\tif(maxp[u]<maxp[cent]) cent = u;",
            "};",
            "auto dfs = [&](auto&& dfs, int u, int p) -> void",
            "{",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(v==p||del[v]) continue;",
            "\t\tdfs(dfs, v, u);",
            "\t}",
            "};",
            "auto calc = [&](auto&& calc,int u)",
            "{",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(del[v]) continue;",
            "\t\tdfs(dfs, v, u);",
            "\t}",
            "};",
            "auto divide = [&](auto&& divide, int u) -> void",
            "{",
            "\tdel[u] = true;",
            "\tcalc(calc, u);",
            "\tfor(auto v : g[u])",
            "\t{",
            "\t\tif(del[v]) continue;",
            "\t\tmaxp[cent=0] = part = siz[v];",
            "\t\tget_cent(get_cent, v, 0);",
            "\t\tget_cent(get_cent, cent, 0);",
            "\t\tdivide(divide, cent);",
            "\t}",
            "};",
            "maxp[cent] = n;",
            "get_cent(get_cent, 1, 0);",
            "get_cent(get_cent, cent, 0);",
            "divide(divide, cent);"
        ]
    },
    "dijkstra": {
        "scope": "cpp",
        "prefix": "dijkstra",
        "body": [
            "auto dijkstra = [&](int s)",
            "{",
            "\tvector<int> dis(g.size(), 1e9);",
            "\tdis[s] = 0;",
            "\tpriority_queue<pair<int,int>, vector<pair<int,int>>, greater<>> pq;",
            "\tpq.emplace(0, s);",
            "\twhile(!pq.empty())",
            "\t{",
            "\t\tauto [d,u] = pq.top();",
            "\t\tpq.pop();",
            "\t\tif(dis[u]<d) continue;",
            "\t\tfor(auto [v,w] : g[u])",
            "\t\t\tif(dis[u]+w<dis[v])",
            "\t\t\t\tpq.emplace(dis[v]=dis[u]+w, v);",
            "\t}",
            "};"
        ]
    },
    "cdq": {
        "scope": "cpp",
        "prefix": "cdq",
        "body": [
            "using E = array<int, 3>; // 数对类型",
            "int n;",
            "vector<E> a(n); // 存储数对，如果没按第一维排序需要先对第一维排序",
            "auto b = a; // 备份数据",
            "// 辅助数据结构（树状数组或者线段树等）",
            "auto cmp = [&](const E& x, const E& y) { /* 按 x[1] 和 y[1] 排序，方向看需求 */ };",
            "auto cdq = [&](auto&& cdq, int l, int r) -> void",
            "{",
            "\tif(l+1==r) return;",
            "\tint m = (l+r)>>1;",
            "\tcdq(cdq, l, m);",
            "\tsort(a.begin()+l, a.begin()+m, cmp);",
            "\tsort(a.begin()+m, a.begin()+r, cmp);",
            "\tint i = l;",
            "\tfor(int j=m;j<r;j++)",
            "\t{",
            "\t\tfor(;i<m&&/* 对 a[j][1] 来说 a[i][1] 满足要求 */;i++)",
            "\t\t/* 更新数据结构，位置为 a[i][2] */",
            "\t\t// [l, i) 向 j 贡献（查询数据结构，位置为 a[j][2]，前缀还是后缀根据题目要求）",
            "\t}",
            "\tfor(int k=l;k<i;k++) // 清空数据结构，位置为 a[k][2]",
            "\tcopy(b.begin()+l, b.begin()+r, a.begin()+l); // 恢复数据",
            "\tcdq(cdq, m, r);",
            "};",
            "cdq(cdq, 0, n);"
        ]
    },
    "dcdp": {
        "scope": "cpp",
        "prefix": "dcdp",
        "body": [
            "auto f = [&](int i, int j) { return $0; };",
            "auto g = [&](auto&& g, int l, int r, int kl, int kr) -> void",
            "{",
            "\tint mid=(l+r)/2, best=kl;",
            "\tfor(int i=kl;i<=min(kr, mid-1);i++) if(f(i, mid)<f(best, mid)) best = i;",
            "\tdp[mid] = f(best, mid);",
            "\tif(l<mid) g(g, l, mid-1, kl, best);",
            "\tif(mid<r) g(g, mid+1, r, best, kr);",
            "};",
            "g(g, 1, n, 0, n);"
        ]
    },
}
