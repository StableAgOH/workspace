{
    "codeforces": {
        "scope": "cpp",
        "prefix": "codeforces",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"lib/local.h\"",
            "#else",
            "#define debug(...)",
            "#define utime()",
            "#endif",
            "void solve(array<const char*, 2> boolmsg, bool multicase, auto&& func)",
            "{",
            "\tusing R = invoke_result_t<decltype(func), int>;",
            "\tint t = 1;",
            "\tif(multicase) cin>>t;",
            "\tfor(int i=1;i<=t;i++)",
            "\t{",
            "\t\tif constexpr(is_same_v<R, void>) func(i);",
            "\t\telse if constexpr(is_same_v<R, bool>) println(\"{}\", boolmsg[!func(i)]);",
            "\t\telse println(\"{}\", func(i));",
            "\t}",
            "}",
            "using ll = long long;",
            "//==========================================",
            "int main()",
            "{",
            "#ifdef LOCAL",
            "\tfreopen(\"in.txt\", \"r\", stdin);",
            "#ifndef DEBUG",
            "\tfreopen(\"out.txt\", \"w\", stdout);",
            "#endif",
            "\ttimer::set_start_time();",
            "#endif",
            "\tcin.tie(nullptr);",
            "\t//======================================",
            "\tsolve({\"Yes\", \"No\"}, true, [&]([[maybe_unused]] const int kase)",
            "\t{",
            "\t\t$0",
            "\t});",
            "\t//======================================",
            "\tutime();",
            "\treturn 0;",
            "}",
            ""
        ]
    },
    "simple": {
        "scope": "cpp",
        "prefix": "simple",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "using ll = long long;",
            "int main()",
            "{",
            "#ifdef LOCAL",
            "\tfreopen(\"in.txt\", \"r\", stdin);",
            "\tfreopen(\"out.txt\", \"w\", stdout);",
            "#endif",
            "\tios::sync_with_stdio(false);",
            "\tcin.tie(nullptr);",
            "\t$0",
            "\treturn 0;",
            "}",
            ""
        ]
    },
    "vector_n_0": {
        "scope": "cpp",
        "prefix": "vn0",
        "body": [
            "vector<int> ${a}(${n});"
        ]
    },
    "vector_n_1": {
        "scope": "cpp",
        "prefix": "vn1",
        "body": [
            "vector<int> ${a}(${n}+1);"
        ]
    },
    "input_vector_n_0": {
        "scope": "cpp",
        "prefix": "ivn0",
        "body": [
            "for(int i=0;i<${n};i++) cin>>${a}[i];"
        ]
    },
    "input_vector_n_1": {
        "scope": "cpp",
        "prefix": "ivn1",
        "body": [
            "for(int i=1;i<=${n};i++) cin>>${a}[i];"
        ]
    },
    "output_vector_n_0": {
        "scope": "cpp",
        "prefix": "ovn0",
        "body": [
            "for(int i=0;i<${n};i++) cout<<${a}[i]<<\" \\n\"[i==${n}-1];"
        ]
    },
    "output_vector_n_1": {
        "scope": "cpp",
        "prefix": "ovn1",
        "body": [
            "for(int i=1;i<=${n};i++) cout<<${a}[i]<<\" \\n\"[i==${n}];"
        ]
    },
    "vector_nm_0": {
        "scope": "cpp",
        "prefix": "vnm0",
        "body": [
            "vector ${a}(n, vector<int>(m));"
        ]
    },
    "vector_nm_1": {
        "scope": "cpp",
        "prefix": "vnm1",
        "body": [
            "vector ${a}(n+1, vector<int>(m+1));"
        ]
    },
    "input_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ivnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcin>>${a}[i][j];",
        ]
    },
    "input_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ivnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcin>>${a}[i][j];",
        ]
    },
    "output_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ovnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m-1];",
        ]
    },
    "output_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ovnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m];",
        ]
    },
    "isort": {
        "scope": "cpp",
        "prefix": "isort",
        "body": [
            "auto o = ranges::to<vector>(views::iota(0, n));",
            "ranges::sort(o, [&](auto i, auto j) { return a[i]<a[j]; });"
        ]
    },
    "comb": {
        "scope": "cpp",
        "prefix": "comb",
        "body": [
            "vector<mint> fac, ifac;",
            "mint A(int n, int m)",
            "{",
            "\tif(m<0||m>n) return 0;",
            "\twhile((int)fac.size()<n+1)",
            "\t{",
            "\t\tif(fac.empty()) fac = ifac = {1};",
            "\t\telse",
            "\t\t{",
            "\t\t\tfac.push_back(fac.back()*fac.size());",
            "\t\t\tifac.push_back(1/fac.back());",
            "\t\t}",
            "\t}",
            "\treturn fac[n]*ifac[n-m];",
            "}",
            "mint C(int n, int m)",
            "{",
            "\tauto a = A(n, m);",
            "\treturn a==0?0:a*ifac[m];",
            "}"
        ]
    },
    "tree": {
        "scope": "cpp",
        "prefix": "tree",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<n;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tG[u].push_back(v);",
            "\tG[v].push_back(u);",
            "}"
        ]
    },
    "graph": {
        "scope": "cpp",
        "prefix": "graph",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=0;i<m;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tG[u].push_back(v);",
            "\tG[v].push_back(u);",
            "}"
        ]
    },
    "div_ceil": {
        "scope": "cpp",
        "prefix": "div_ceil",
        "body": [
            "auto div_ceil = [&](auto x, auto y) { return x/y+!!(x%y); };"
        ]
    },
    "chmin": {
        "scope": "cpp",
        "prefix": "chmin",
        "body": [
            "auto chmin = [&](auto& a, const auto& b) { return b<a&&(a=b,true); };"
        ]
    },
    "chmax": {
        "scope": "cpp",
        "prefix": "chmax",
        "body": [
            "auto chmax = [&](auto& a, const auto& b) { return b>a&&(a=b,true); };"
        ]
    },
    "dfs": {
        "scope": "cpp",
        "prefix": "dfs",
        "body": [
            "auto dfs = [&](this auto dfs, int u, int f) -> void",
            "{",
            "\tfor(auto v : G[u])",
            "\t{",
            "\t\tif(v==f) continue;",
            "\t\tdfs(v, u);",
            "\t}",
            "};",
            "dfs(1, 0);"
        ]
    },
    "hasher": {
        "scope": "cpp",
        "prefix": "hasher",
        "body": [
            "struct hasher",
            "{",
            "\tstatic uint64_t splitmix64(uint64_t x)",
            "\t{",
            "\t\tx += 0x9e3779b97f4a7c15;",
            "\t\tx = (x^(x>>30))*0xbf58476d1ce4e5b9;",
            "\t\tx = (x^(x>>27))*0x94d049bb133111eb;",
            "\t\treturn x^(x>>31);",
            "\t}",
            "\tsize_t operator()(uint64_t x) const ",
            "\t{",
            "\t\tstatic const uint64_t fix = chrono::steady_clock::now().time_since_epoch().count();",
            "\t\treturn splitmix64(x+fix);",
            "\t}",
            "};"
        ]
    },
    "erfen": {
        "scope": "cpp",
        "prefix": "erfen",
        "body": [
            "auto check = [&](auto g)",
            "{",
            "\t$0",
            "};",
            "ll l=1, r=1e9;",
            "while(l<r)",
            "{",
            "\tauto m = midpoint(l,r);",
            "\tif(check(m)) r = m;",
            "\telse l = m+1;",
            "}",
            "return l;"
        ]
    },
    "sanfen": {
        "scope": "cpp",
        "prefix": "sanfen",
        "body": [
            "ll l=1, r=1e9;",
            "while(l<r)",
            "{",
            "\tauto ml=l+(r-l)/3, mr=r-(r-l)/3;",
            "\tauto fl=f(ml), fr=f(mr);",
            "\tif(fl<=fr)",
            "\t{",
            "\t\tchmin(ans, fl);",
            "\t\tr = mr-1;",
            "\t}",
            "\telse",
            "\t{",
            "\t\tchmin(ans, fr);",
            "\t\tl = ml+1;",
            "\t}",
            "}",
            "return ans;"
        ]
    },
    "modui": {
        "scope": "cpp",
        "prefix": "modui",
        "body": [
            "vector<pair<int,int>> q(m);",
            "for(int i=0;i<m;i++) cin>>q[i].first>>q[i].second;",
            "int siz = n/sqrt(m)+1;",
            "vector<int> pos(n+1);",
            "for(int i=1;i<=n;i++) pos[i] = i/siz;",
            "ll res = 0;",
            "auto add = [&](int p)",
            "{",
            "};",
            "auto del = [&](int p)",
            "{",
            "};",
            "auto o = ranges::to<vector>(views::iota(0, n));",
            "ranges::sort(o, [&](int i, int j) {",
            "\tauto [l1,r1] = q[i];",
            "\tauto [l2,r2] = q[j];",
            "\treturn pos[l1]==pos[l2]",
            "\t\t? r1==r2?false:((pos[l1]&1)^(r1<r2))",
            "\t\t: l1<l2;",
            "});",
            "vector<ll> ans(m);",
            "int l=1, r=0;",
            "for(auto i : o)",
            "{",
            "\tauto [L,R] = q[i];",
            "\twhile(L<l) add(--l);",
            "\twhile(R>r) add(++r);",
            "\twhile(L>l) del(l++);",
            "\twhile(R<r) del(r--);",
            "\tans[i] = res;",
            "}",
            "for(int i=0;i<m;i++) cout<<ans[i]<<'\\n';"
        ]
    },
    "shuwei": {
        "scope": "cpp",
        "prefix": "shuwei",
        "body": [
            "auto f = [&](ll x) -> ll // [1,x]",
            "{",
            "\tauto a = ranges::to<vector>(to_string(x)|views::transform([](char c) { return c-'0'; }));",
            "\tvector dp(15, vector(15, vector(2, vector<ll>(2, -1))));",
            "\t// 到第 p 位，x 代表到当前位时 {?}，前一位是否顶着上界(lim)，前一位是不是前导零(zero)",
            "\tauto dfs = [&](this auto dfs, size_t p, int x, bool lim, bool zero) -> ll",
            "\t{",
            "\t\tif(p==a.size()) return /* {确定一个解对答案的贡献} */;",
            "\t\tif(~dp[p][x][lim][zero]) return dp[p][x][lim][zero];",
            "\t\tll res = 0;",
            "\t\tfor(int i=zero;i<=(lim?a[p]:9);i++) // 第 p 位取 i",
            "\t\t{",
            "\t\t\t/* {确定是否需要筛选 i} */",
            "\t\t\tres += dfs(p+1, /* {确定 x 的变化} */, lim&&i==a[p], false);",
            "\t\t}",
            "\t\treturn dp[p][x][lim][zero] = res;",
            "\t};",
            "\tll ret = 0;",
            "\tfor(size_t i=0;i<a.size();i++)  // 第 i 位是第一个非 0 的",
            "\t\tret += dfs(i, /* {x 的初始值} */, !i, true);",
            "\treturn ret;",
            "};",
            ""
        ]
    },
    "hjt": {
        "scope": "cpp",
        "prefix": "hjt",
        "body": [
            "struct Node { int l,r,val; };",
            "vector<Node> t(m*(ceil(log2(n))+1));",
            "vector<int> root(n+1);",
            "int cnt = 0;",
            "auto ins = [&](auto&& ins, int l,int r,int pre,int& k,int x)",
            "{",
            "\tk = ++cnt;",
            "\tt[k] = t[pre];",
            "\tt[k].val++;",
            "\tif(l==r) return;",
            "\tint m = (l+r)>>1;",
            "\tif(x<=m) ins(ins,l,m,t[pre].l,t[k].l,x);",
            "\telse ins(ins,m+1,r,t[pre].r,t[k].r,x);",
            "};",
            "auto query = [&](this auto query,int l,int r,int L,int R,int x,int y)",
            "{",
            "\tif(x<=l&&y>=r) return t[R].val-t[L].val;",
            "\tint m = (l+r)>>1;",
            "\tint sum = 0;",
            "\tif(x<=m) sum += query(l,m,t[L].l,t[R].l,x,y);",
            "\tif(y>m) sum += query(m+1,r,t[L].r,t[R].r,x,y);",
            "\treturn sum;",
            "};",
            ""
        ]
    },
    "dsuontree": {
        "scope": "cpp",
        "prefix": "dsuontree",
        "body": [
            "int tim = 0;",
            "vector<int> siz(n+1), son(n+1), dfn(n+1), id(n+1);",
            "auto dfs1 = [&](this auto dfs1,int u,int f) -> void",
            "{",
            "\tsiz[u] = 1;",
            "\tdfn[u] = ++tim;",
            "\tid[tim] = u;",
            "\tfor(auto v : G[u])",
            "\t{",
            "\t\tif(v==f) continue;",
            "\t\tdfs1(v,u);",
            "\t\tsiz[u] += siz[v];",
            "\t\tif(siz[v]>siz[son[u]]) son[u] = v;",
            "\t}",
            "};",
            "auto add = [&](int u)",
            "{",
            "};",
            "auto del = [&](int u)",
            "{",
            "};",
            "auto dfs2 = [&](this auto dfs2,int u,int f,bool keep) -> void",
            "{",
            "\tfor(auto v : G[u])",
            "\t{",
            "\t\tif(v==f||v==son[u]) continue;",
            "\t\tdfs2(v,u,false);",
            "\t}",
            "\tif(son[u]) dfs2(son[u],u,true);",
            "\tadd(u);",
            "\tfor(auto v : G[u])",
            "\t{",
            "\t\tif(v==f||v==son[u]) continue;",
            "\t\tfor(int i=dfn[v];i<dfn[v]+siz[v];i++)",
            "\t\t\tadd(id[i]);",
            "\t}",
            "\tans[u] = sum;",
            "\tif(!keep)",
            "\t{",
            "\t\tfor(int i=dfn[u];i<dfn[u]+siz[u];i++)",
            "\t\t\tdel(id[i]);",
            "\t}",
            "};",
            "dfs1(1,0);",
            "dfs2(1,0,false);",
            ""
        ]
    },
}
