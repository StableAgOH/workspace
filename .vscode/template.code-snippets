{
    "template": {
        "scope": "cpp",
        "prefix": "prepare",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"lib/local.h\"",
            "#else",
            "#define debug(...) 42",
            "#define utime() 42",
            "#endif",
            "auto div_ceil(integral auto x, integral auto y) { auto [p,q]=div(x,y); return p+(q>0); }",
            "bool chmin(auto& a, const auto& b) { return b<a&&(a=b,true); }",
            "bool chmax(auto& a, const auto& b) { return b>a&&(a=b,true); }",
            "void solve(array<const char*, 2> msg, bool is_multicase, auto&& func)",
            "{",
            "\tusing R = invoke_result_t<decltype(func), int>;",
            "\tint t = 1;",
            "\tif(is_multicase) cin>>t;",
            "\tfor(int i=1;i<=t;i++)",
            "\t{",
            "\t\tif constexpr(is_same_v<R, void>) func(i);",
            "\t\telse if constexpr(is_same_v<R, bool>) cout<<msg[!func(i)]<<'\\n';",
            "\t\telse cout<<func(i)<<'\\n';",
            "\t}",
            "}",
            "using ll = long long;",
            "//==========================================",
            "int main()",
            "{",
            "#ifdef LOCAL",
            "\tfreopen(\"in.txt\", \"r\", stdin);",
            "#ifndef DEBUG",
            "\tfreopen(\"out.txt\", \"w\", stdout);",
            "#endif",
            "\ttimer::set_begin_time();",
            "#endif",
            "\tios::sync_with_stdio(false);",
            "\tcin.tie(nullptr);",
            "\t//======================================",
            "\tsolve({\"Yes\", \"No\"}, true, [&]([[maybe_unused]] const int kase)",
            "\t{",
            "\t\t$0",
            "\t});",
            "\t//======================================",
            "\tutime();",
            "\treturn 0;",
            "}",
            ""
        ]
    },
    "vector_n_0": {
        "scope": "cpp",
        "prefix": "vn0",
        "body": [
            "vector<int> ${a}(${n});"
        ],
        "description": "0-indexed vector"
    },
    "vector_n_1": {
        "scope": "cpp",
        "prefix": "vn1",
        "body": [
            "vector<int> ${a}(${n}+1);"
        ],
        "description": "1-indexed vector"
    },
    "input_vector_n_0": {
        "scope": "cpp",
        "prefix": "ivn0",
        "body": [
            "for(int i=0;i<${n};i++) cin>>${a}[i];"
        ],
        "description": "input 0-indexed vector"
    },
    "input_vector_n_1": {
        "scope": "cpp",
        "prefix": "ivn1",
        "body": [
            "for(int i=1;i<=${n};i++) cin>>${a}[i];"
        ],
        "description": "input 1-indexed vector"
    },
    "output_vector_n_0": {
        "scope": "cpp",
        "prefix": "ovn0",
        "body": [
            "for(int i=0;i<${n};i++) cout<<${a}[i]<<\" \\n\"[i==${n}-1];"
        ],
        "description": "output 0-indexed vector"
    },
    "output_vector_n_1": {
        "scope": "cpp",
        "prefix": "ovn1",
        "body": [
            "for(int i=1;i<=${n};i++) cout<<${a}[i]<<\" \\n\"[i==${n}];"
        ],
        "description": "output 1-indexed vector"
    },
    "vector_nm_0": {
        "scope": "cpp",
        "prefix": "vnm0",
        "body": [
            "vector ${a}(n, vector<int>(m));"
        ],
        "description": "vector_nm_0"
    },
    "vector_nm_1": {
        "scope": "cpp",
        "prefix": "vnm1",
        "body": [
            "vector ${a}(n+1, vector<int>(m+1));"
        ],
        "description": "vector_nm_1"
    },
    "input_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ivnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcin>>${a}[i][j];",
        ],
        "description": "input_vector_nm_0"
    },
    "input_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ivnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcin>>${a}[i][j];",
        ],
        "description": "input_vector_nm_1"
    },
    "output_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ovnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m-1];",
        ],
        "description": "output_vector_nm_0"
    },
    "output_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ovnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m];",
        ],
        "description": "output_vector_nm_1"
    },
    "isort": {
        "scope": "cpp",
        "prefix": "isort",
        "body": [
            "vector<int> o(n);",
            "iota(o.begin(), o.end(), 0);",
            "ranges::sort(o, [&](int i,int j) { return ${a}[i]<${a}[j]; });"
        ]
    },
    "numno": {
        "scope": "cpp",
        "prefix": "numno",
        "body": [
            "const int mod = 998244353;",
            "ll qpow(ll a,ll k,ll p=mod)",
            "{",
            "\tll res = 1;",
            "\tfor(;k;k>>=1,a=a*a%p)",
            "\t\tif(k&1) res=res*a%p;",
            "\treturn res;",
            "};",
            "ll inv(ll a,ll p=mod) { return qpow(a, p-2, p); }",
            "vector<ll> fac, ifac;",
            "ll A(int n,int m)",
            "{",
            "\tif(m<0||m>n) return 0;",
            "\twhile((int)fac.size()<n+1)",
            "\t{",
            "\t\tif(fac.empty()) fac = ifac = {1};",
            "\t\telse",
            "\t\t{",
            "\t\t\tfac.push_back(fac.back()*fac.size()%mod);",
            "\t\t\tifac.push_back(inv(fac.back()));",
            "\t\t}",
            "\t}",
            "\treturn fac[n]*ifac[n-m]%mod;",
            "}",
            "ll C(int n,int m)",
            "{",
            "\tauto a = A(n,m);",
            "\treturn a?a*ifac[n-m]%mod:0;",
            "}"
        ]
    },
    "tree": {
        "scope": "cpp",
        "prefix": "tree",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<n;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tG[u].push_back(v);",
            "\tG[v].push_back(u);",
            "}"
        ],
        "description": "树"
    },
    "graph": {
        "scope": "cpp",
        "prefix": "graph",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<=m;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tG[u].push_back(v);",
            "\tG[v].push_back(u);",
            "}"
        ],
        "description": "图"
    },
    "dfs": {
        "scope": "cpp",
        "prefix": "dfs",
        "body": [
            "auto ${dfs} = [&](auto&& ${dfs},int u,int f) -> void",
            "{",
            "\tfor(auto v : G[u])",
            "\t{",
            "\t\tif(v==f) continue;",
            "\t\t${dfs}(${dfs},v,u);",
            "\t}",
            "};",
            "${dfs}(${dfs},1,0);"
        ]
    },
    "hasher": {
        "scope": "cpp",
        "prefix": "hasher",
        "body": [
            "struct hasher",
            "{",
            "\tstatic uint64_t splitmix64(uint64_t x)",
            "\t{",
            "\t\tx += 0x9e3779b97f4a7c15;",
            "\t\tx = (x^(x>>30))*0xbf58476d1ce4e5b9;",
            "\t\tx = (x^(x>>27))*0x94d049bb133111eb;",
            "\t\treturn x^(x>>31);",
            "\t}",
            "\tsize_t operator()(uint64_t x) const ",
            "\t{",
            "\t\tstatic const uint64_t fix = chrono::steady_clock::now().time_since_epoch().count();",
            "\t\treturn splitmix64(x+fix);",
            "\t}",
            "};"
        ]
    },
    "erfen": {
        "scope": "cpp",
        "prefix": "erfen",
        "body": [
            "auto check = [&](auto g)",
            "{",
            "\t$0",
            "};",
            "ll l=1, r=1e9;",
            "while(l<r)",
            "{",
            "\tauto m = midpoint(l,r);",
            "\tif(check(m)) r = m;",
            "\telse l = m+1;",
            "}",
            "return l;"
        ]
    },
    "sanfen": {
        "scope": "cpp",
        "prefix": "sanfen",
        "body": [
            "ll l=1, r=1e9;",
            "while(l<r)",
            "{",
            "\tauto ml=l+(r-l)/3, mr=r-(r-l)/3;",
            "\tauto fl=f(ml), fr=f(mr);",
            "\tif(fl<=fr)",
            "\t{",
            "\t\tchmin(ans, fl);",
            "\t\tr = mr-1;",
            "\t}",
            "\telse",
            "\t{",
            "\t\tchmin(ans, fr);",
            "\t\tl = ml+1;",
            "\t}",
            "}",
            "return ans;"
        ]
    },
    "modui": {
        "scope": "cpp",
        "prefix": "modui",
        "body": [
            "int siz = sqrt(n);",
            "vector<int> pos(n+1);",
            "for(int i=1;i<=n;i++) pos[i] = i/siz;",
            "int res = 0;",
            "auto add = [&](int p) {};",
            "auto del = [&](int p) {};",
            "vector<tuple<int,int,int>> q(m);",
            "for(int i=0;i<m;i++)",
            "{",
            "\tauto& [l,r,k] = q[i];",
            "\tcin>>l>>r;",
            "\tk = i;",
            "}",
            "sort(q.begin(), q.end(), [&](auto& p, auto& q) {",
            "\tauto [l1,r1,k1] = p;",
            "\tauto [l2,r2,k2] = q;",
            "\treturn pos[l1]==pos[l2]",
            "\t\t? r1==r2?false:((pos[l1]&1)^(r1<r2))",
            "\t\t: l1<l2;",
            "});",
            "vector<int> ans(m);",
            "int l=1, r=0;",
            "for(auto [L,R,K] : q)",
            "{",
            "\twhile(L<l) add(--l);",
            "\twhile(R>r) add(++r);",
            "\twhile(L>l) del(l++);",
            "\twhile(R<r) del(r--);",
            "\tans[K] = res;",
            "}",
            "for(int i=0;i<m;i++) cout<<ans[i]<<'\\n';"
        ]
    },
    "shuwei": {
        "scope": "cpp",
        "prefix": "shuwei",
        "body": [
            "auto f = [&](ll x) -> ll // [1,x]",
            "{",
            "\tauto s = to_string(x);",
            "\tint len = s.length();",
            "\tvector<int> a(len);",
            "\tranges::transform(s, a.begin(), [](char c) { return c-'0'; });",
            "\tvector dp(15, vector(15, vector(2, vector<ll>(2, -1))));",
            "\t// 到第 p 位，x 代表到当前位 [...]，前一位是否顶着上界(lim)，前一位是不是前导零(zero)",
            "\tfunction<ll(int,int,bool,bool)> dfs = [&](int p, int x, bool lim, bool zero) -> ll",
            "\t{",
            "\t\tif(p==len) return /* [...] */;  // 找到一个解（确定一个解对答案的贡献）",
            "\t\tif(~dp[p][x][lim][zero]) return dp[p][x][lim][zero];",
            "\t\tll res = 0;",
            "\t\tfor(int i=zero;i<=(lim?a[p]:9);i++)   // 第 p 位取 i",
            "\t\t{",
            "\t\t\t/* [...] */ // 确定是否需要筛选 i",
            "\t\t\tauto nxt = [&]() -> int { /* [...] */ };   // 根据需要计算 x 值",
            "\t\t\tres += dfs(p+1, nxt(), lim&&i==a[p], false);",
            "\t\t}",
            "\t\treturn dp[p][x][lim][zero] = res;",
            "\t};",
            "\tll ret = 0;",
            "\tret += dfs(0,/* [...] */,true,true);",
            "\tfor(int i=1;i<len;i++) ret += dfs(i,/* [...] */,false,true);  // 第 i 位是第一个非 0 的",
            "\treturn ret;",
            "};"
        ],
        "description": "数位 DP"
    },
    "hjt": {
        "scope": "cpp",
        "prefix": "hjt",
        "body": [
            "struct Node { int l,r,val; };",
            "vector<Node> t(m*(ceil(log2(n))+1));",
            "vector<int> root(n+1);",
            "int cnt = 0;",
            "auto ins = [&](auto&& ins, int l,int r,int pre,int& k,int x)",
            "{",
            "\tk = ++cnt;",
            "\tt[k] = t[pre];",
            "\tt[k].val++;",
            "\tif(l==r) return;",
            "\tint m = (l+r)>>1;",
            "\tif(x<=m) ins(ins,l,m,t[pre].l,t[k].l,x);",
            "\telse ins(ins,m+1,r,t[pre].r,t[k].r,x);",
            "};",
            "auto query = [&](auto&& query,int l,int r,int L,int R,int x,int y)",
            "{",
            "\tif(x<=l&&y>=r) return t[R].val-t[L].val;",
            "\tint m = (l+r)>>1;",
            "\tint sum = 0;",
            "\tif(x<=m) sum += query(query,l,m,t[L].l,t[R].l,x,y);",
            "\tif(y>m) sum += query(query,m+1,r,t[L].r,t[R].r,x,y);",
            "\treturn sum;",
            "};",
            ""
        ]
    }
}
