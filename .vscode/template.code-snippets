{
    "template": {
        "scope": "cpp",
        "prefix": "prepare",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"lib/local.h\"",
            "#define utime() timer::utime(__LINE__)",
            "#else",
            "#define dbg(...) (__VA_ARGS__)",
            "#define utime() 42",
            "#endif",
            "#define UNREACHABLE false",
            "#define unreachable() assert(UNREACHABLE)",
            "using ll = long long;",
            "using ld = long double;",
            "using pii = pair<int,int>;",
            "template <typename T> constexpr T INF = numeric_limits<T>::max()/2;",
            "namespace solver",
            "{",
            "array<string,2> tfmsg;",
            "bool multicases;",
            "template <typename F, typename T>",
            "concept sol_ret_type_same_as = same_as<typename result_of<F(int)>::type, T>;",
            "template <typename F>",
            "requires sol_ret_type_same_as<F, void>",
            "void call(F solve, int kase) { solve(kase); }",
            "template <typename F>",
            "requires sol_ret_type_same_as<F, bool>",
            "void call(F solve, int kase) { cout<<tfmsg[!solve(kase)]<<'\\n'; }",
            "template <typename F>",
            "requires (!sol_ret_type_same_as<F, void>) && (!sol_ret_type_same_as<F, bool>)",
            "void call(F solve, int kase) { cout<<solve(kase)<<'\\n'; }",
            "template <typename F>",
            "void solve(F func)",
            "{",
            "\tint t = 1;",
            "\tif(multicases) cin>>t;",
            "\tfor(int i=1;i<=t;i++) call(func, i);",
            "}",
            "} // namespace solver",
            "//==========================================",
            "int main(int argc, const char* argv[])",
            "{",
            "#ifdef LOCAL",
            "\tfreopen(\"in.in\", \"r\", stdin);",
            "#ifndef DEBUG",
            "\tfreopen(\"out.out\", \"w\", stdout);",
            "#endif",
            "\ttimer::set_begin_time();",
            "#endif",
            "\tios::sync_with_stdio(false);",
            "\tcin.tie(nullptr);",
            "\t//======================================",
            "\tsolver::tfmsg = {\"YES\", \"NO\"};",
            "\tsolver::multicases = true;",
            "\tauto solve = [&](int kase)",
            "\t{",
            "\t\t$0",
            "\t};",
            "\t//======================================",
            "\tsolver::solve(solve);",
            "\tutime();",
            "\treturn 0;",
            "}",
            ""
        ],
        "description": "代码模板"
    },
    "vector_n_0": {
        "scope": "cpp",
        "prefix": "vn0",
        "body": [
            "vector<int> ${a}(n);"
        ],
        "description": "0-indexed vector"
    },
    "vector_nn_0": {
        "scope": "cpp",
        "prefix": "vnn0",
        "body": [
            "vector<int> ${a}(n), ${b}(n);"
        ],
        "description": "0-indexed vector * 2"
    },
    "vector_n_1": {
        "scope": "cpp",
        "prefix": "vn1",
        "body": [
            "vector<int> ${a}(n+1);"
        ],
        "description": "1-indexed vector"
    },
    "vector_nn_1": {
        "scope": "cpp",
        "prefix": "vnn1",
        "body": [
            "vector<int> ${a}(n+1), ${b}(n+1);"
        ],
        "description": "1-indexed vector * 2"
    },
    "input_vector_n_0": {
        "scope": "cpp",
        "prefix": "ivn0",
        "body": [
            "for(int i=0;i<n;i++) cin>>${a}[i];"
        ],
        "description": "input 0-indexed vector"
    },
    "input_vector_n_1": {
        "scope": "cpp",
        "prefix": "ivn1",
        "body": [
            "for(int i=1;i<=n;i++) cin>>${a}[i];"
        ],
        "description": "input 1-indexed vector"
    },
    "output_vector_n_0": {
        "scope": "cpp",
        "prefix": "ovn0",
        "body": [
            "for(int i=0;i<n;i++) cout<<${a}[i]<<\" \\n\"[i==n-1];"
        ],
        "description": "output 0-indexed vector"
    },
    "output_vector_n_1": {
        "scope": "cpp",
        "prefix": "ovn1",
        "body": [
            "for(int i=1;i<=n;i++) cout<<${a}[i]<<\" \\n\"[i==n];"
        ],
        "description": "output 1-indexed vector"
    },
    "vector_nm_0": {
        "scope": "cpp",
        "prefix": "vnm0",
        "body": [
            "vector<vector<int>> ${a}(n, vector<int>(m));"
        ],
        "description": "vector_nm_0"
    },
    "vector_nm_1": {
        "scope": "cpp",
        "prefix": "vnm1",
        "body": [
            "vector<vector<int>> ${a}(n+1, vector<int>(m+1));"
        ],
        "description": "vector_nm_1"
    },
    "input_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ivnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcin>>${a}[i][j];",
        ],
        "description": "input_vector_nm_0"
    },
    "input_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ivnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcin>>${a}[i][j];",
        ],
        "description": "input_vector_nm_1"
    },
    "output_vector_nm_0": {
        "scope": "cpp",
        "prefix": "ovnm0",
        "body": [
            "for(int i=0;i<n;i++)",
            "\tfor(int j=0;j<m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m-1];",
        ],
        "description": "output_vector_nm_0"
    },
    "output_vector_nm_1": {
        "scope": "cpp",
        "prefix": "ovnm1",
        "body": [
            "for(int i=1;i<=n;i++)",
            "\tfor(int j=1;j<=m;j++)",
            "\t\tcout<<${a}[i][j]<<\" \\n\"[j==m];",
        ],
        "description": "output_vector_nm_1"
    },
    "numno": {
        "scope": "cpp",
        "prefix": "numno",
        "body": [
            "const int mod = 998244353;",
            "ll qpow(ll a,ll k,ll p=mod)",
            "{",
            "\tll res = 1;",
            "\tfor(;k;k>>=1,a=a*a%p)",
            "\t\tif(k&1) res=res*a%p;",
            "\treturn res;",
            "};",
            "ll inv(ll a,ll p=mod) { return qpow(a, mod-2, mod); }",
            "vector<ll> fac, ifac;",
            "ll A(int n,int m)",
            "{",
            "\tif(m<0||m>n) return 0;",
            "\twhile((int)fac.size()<n+1)",
            "\t{",
            "\t\tif(fac.empty()) fac = ifac = {1};",
            "\t\telse",
            "\t\t{",
            "\t\t\tfac.push_back(fac.back()*fac.size()%mod);",
            "\t\t\tifac.push_back(inv(fac.back()));",
            "\t\t}",
            "\t}",
            "\treturn fac[n]*ifac[m]%mod;",
            "}",
            "ll C(int n,int m) { return A(n,m)*ifac[n-m]%mod; }"
        ]
    },
    "tree": {
        "scope": "cpp",
        "prefix": "tree",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<n;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tG[u].push_back(v);",
            "\tG[v].push_back(u);",
            "}",
            ""
        ],
        "description": "树"
    },
    "graph": {
        "scope": "cpp",
        "prefix": "graph",
        "body": [
            "vector<vector<int>> G(n+1);",
            "for(int i=1;i<=m;i++)",
            "{",
            "\tint u,v;",
            "\tcin>>u>>v;",
            "\tG[u].push_back(v);",
            "\tG[v].push_back(u);",
            "}",
            ""
        ],
        "description": "图"
    },
    "dfs": {
        "scope": "cpp",
        "prefix": "dfs",
        "body": [
            "function<void(int,int)> dfs = [&](int u,int p)",
            "{",
            "\tfor(auto v : G[u])",
            "\t{",
            "\t\tif(v==p) continue;",
            "\t\tdfs(v,u);",
            "\t}",
            "};",
            "dfs(1,0);",
            ""
        ],
        "description": "图上 dfs"
    },
    "ufs": {
        "scope": "cpp",
        "prefix": "ufs",
        "body": [
            "vector<int> fa(n+1);",
            "iota(fa.begin()+1, fa.end(), 1);",
            "function<int(int)> find = [&](int x) { return x==fa[x]?x:fa[x]=find(fa[x]); };",
            ""
        ],
        "description": "并查集"
    }
}