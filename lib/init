#include <bits/stdc++.h>
using namespace std;
#ifdef LOCAL
#include "lib/local.hpp"
#define debug(...) debug(#__VA_ARGS__, __VA_ARGS__)
#else
#define debug(...) 42
#endif
#define UNREACHABLE false
#define unreachable() assert(UNREACHABLE)
using ll = long long;
using ld = long double;
template <typename T>
using pi = pair<T,T>;
template <typename T>
using tp3 = tuple<T,T,T>;
class solver
{
private:
    template <typename F>
    requires same_as<invoke_result_t<F>, void>
    static void call(F func) { func(); }
    template <typename F>
    requires same_as<invoke_result_t<F>, bool>
    static void call(F func) { cout<<(func()?tf.first:tf.second)<<'\n'; }
    template <typename F>
    static void call(F func) { cout<<func()<<'\n'; }
public:
    static bool multicases;
    static pi<string> tf;
    template <typename F>
    static void solve(F func)
    {
        int t = 1;
        if(multicases) cin>>t;
        while(t--) call(func);
    }
};
//==========================================
pi<string> solver::tf = {"YES", "NO"};
bool solver::multicases = true;
auto solve()
{
    
}
int main(int argc, const char* argv[])
{
#ifdef LOCAL
    freopen("in.in", "r", stdin);
#ifndef DEBUG
    freopen("out.out", "w", stdout);
#endif
    auto begin_time = chrono::high_resolution_clock::now();
#endif
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solver::solve(solve);
#ifdef LOCAL
    auto end_time = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::milliseconds>(end_time-begin_time);
    clog<<"Time Used:"<<duration.count()<<"ms"<<endl;
#endif
    return 0;
}
